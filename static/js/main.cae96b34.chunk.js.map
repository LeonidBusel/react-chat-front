{"version":3,"sources":["view/components/activeUser/ActiveUser.js","view/components/colorPicker/ColorPicker.js","view/components/chatArea/ChatArea.js","view/components/privateRoute/PrivateRoute.js","state/slice/loginSlice.js","view/pages/welcome/Welcome.js","view/pages/chat/Chat.js","state/slice/msgSlice.js","utils/chatWebSocket.js","Router.js","state/slice/index.js","state/store.js","index.js"],"names":["Text","Typography","Title","ActiveUser","allUser","className","level","dataSource","renderItem","item","i","nickName","nickColor","clientId","Item","Meta","title","style","color","ColorPicker","onClose","animation","enableAlpha","defaultColor","TextArea","Input","ChatArea","allMsg","sendMsgHandle","chatBodyEndRef","useRef","Form","useForm","form","useEffect","current","scrollIntoView","id","message","date","type","description","ref","name","layout","size","onFinish","values","resetFields","extra","rows","placeholder","required","onKeyDown","event","ctrlKey","keyCode","submit","preventDefault","htmlType","PrivateRoute","path","exact","component","loginSlice","createSlice","initialState","isLogin","reducers","login","state","payload","logout","actions","Header","Layout","Content","connect","ws","userLogin","dispatch","bindActionCreators","props","useState","setColor","history","useHistory","push","nickname","label","maxLength","messageSlice","isOpen","msg","activeUser","open","slice","close","ChatWebSocket","pingInterval","msgAllCallback","activeUserCallback","logoutUserCallback","WebSocket","onopen","console","log","send","JSON","stringify","setInterval","onmessage","data","parse","messages","onerror","error","clearInterval","onclose","useSelector","allActiveUser","readyState","to","gutter","span","Routes","Welcome","Chat","store","configureStore","reducer","ReactDOM","render","StrictMode","Router","document","getElementById"],"mappings":"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","file":"static/js/main.cae96b34.chunk.js","sourcesContent":["import { List, Typography } from 'antd';\r\n\r\nimport \"./activeUser.scss\";\r\n\r\nconst { Text, Title  } = Typography;\r\n\r\nconst ActiveUser = ({ allUser }) => {\r\n    return (\r\n        <div className=\"active-user-wrapper\">\r\n            <Title level={3}>Active Users:</Title>\r\n            <List\r\n                dataSource={allUser}\r\n                renderItem={(item, i) => {\r\n                    const { nickName, nickColor, clientId } = item;\r\n\r\n                    return (\r\n                        <List.Item key={clientId}>\r\n                            <List.Item.Meta\r\n                                title={<Text style={{ color: nickColor }}>{i+1}. {nickName}</Text>}\r\n                            />\r\n                        </List.Item>\r\n                    )\r\n                }}\r\n            ></List>\r\n        </div>)\r\n}\r\n\r\nexport default ActiveUser;","import { useState } from \"react\";\r\nimport RCColorPicker from \"rc-color-picker\";\r\n\r\nimport 'rc-color-picker/assets/index.css';\r\n\r\nimport \"./colorPicker.scss\";\r\n\r\nconst ColorPicker = ({ onClose, color }) => {\r\n    return (\r\n        <div className=\"color-picker-wrapper\">\r\n            <RCColorPicker animation=\"slide-up\" enableAlpha={true} defaultColor={color} onClose={onClose} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ColorPicker;","import { useEffect, useRef } from 'react';\r\nimport { List, Typography, Form, Input, Button } from 'antd';\r\n\r\nimport \"./chatArea.scss\";\r\n\r\nconst { Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst ChatArea = ({ allMsg, sendMsgHandle }) => {\r\n    const chatBodyEndRef = useRef(null);\r\n    const [form] = Form.useForm();\r\n\r\n    const onEnterHandle = (event) => {\r\n        if (event.ctrlKey && ((event.keyCode == 0xA) || (event.keyCode == 0xD))) { // ctrl + enter, submit form\r\n            form.submit();\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        form.resetFields();\r\n        sendMsgHandle(values);\r\n    }\r\n\r\n    useEffect(() => {\r\n        chatBodyEndRef.current.scrollIntoView();\r\n    }, [allMsg]);\r\n\r\n    return (\r\n        <div className=\"chat-area-wrapper\">\r\n            <div className=\"chat-body\">\r\n                <List\r\n                    dataSource={allMsg}\r\n                    renderItem={item => {\r\n                        const { nickName, nickColor, id, message, date } = item;\r\n\r\n                        return (\r\n                            <List.Item key={id}>\r\n                                <List.Item.Meta\r\n                                    title={<><Text style={{ color: nickColor }}>{nickName}</Text> <Text type=\"secondary\">{date}</Text></>}\r\n                                    description={<Text>{message}</Text>}\r\n                                />\r\n                            </List.Item>\r\n                        )\r\n                    }}\r\n                ></List>\r\n                <div className=\"chat-body-end-fake\" ref={chatBodyEndRef} />\r\n            </div>\r\n            <Form\r\n                className=\"msg-send-form\"\r\n                form={form}\r\n                name=\"message-form\"\r\n                layout=\"inline\"\r\n                size=\"medium\"\r\n                onFinish={onFinish}>\r\n\r\n                <Form.Item name=\"message\" className=\"text-area-wrapper\" extra=\"press ctrl + enter for send msg\">\r\n                    <TextArea rows={2} placeholder=\"Type msg...\" required onKeyDown={onEnterHandle} />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">Send</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>)\r\n}\r\n\r\nexport default ChatArea;","import { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({ path, exact, component }) => {\r\n    return true ? (<Route path={path} exact={exact} component={component} />) :\r\n        (<Redirect to=\"/\" />);\r\n};\r\n\r\nexport default PrivateRoute;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const initialState = {\r\n    isLogin: false,\r\n    nickName: null,\r\n    nickColor: null\r\n};\r\n\r\nexport const loginSlice = createSlice({\r\n    name: 'login',\r\n    initialState,\r\n    reducers: {\r\n        login: (state, { payload }) => {\r\n            state.isLogin = true;\r\n            state.nickName = payload.nickName;\r\n            state.nickColor = payload.nickColor;\r\n        },\r\n        logout: state => {\r\n            state.isLogin = false;\r\n            state.nickName = null;\r\n            state.nickColor = null;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { login, logout } = loginSlice.actions;\r\n\r\nexport default loginSlice.reducer;","import { useState, useEffect } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Layout, Typography, Form, Input, Button } from 'antd';\r\nimport { ColorPicker } from '@components';\r\nimport { login } from '@slice/loginSlice';\r\nimport \"./welcome.scss\";\r\n\r\nconst { Header, Content } = Layout;\r\nconst { Title } = Typography;\r\n\r\nconst Welcome = (props) => {\r\n    const [form] = Form.useForm();\r\n    const [color, setColor] = useState(\"#000\");\r\n    const history = useHistory();\r\n\r\n    const onFinish = (values) => {\r\n        props.login({ nickName: values.nickname, nickColor: color });\r\n    };\r\n\r\n    /* didMount */\r\n    useEffect(() => {\r\n        if (props.userLogin.isLogin) history.push(\"/chat\");\r\n    }, [props.userLogin.isLogin]);\r\n\r\n    const colorPickerHandle = ({ color }) => {\r\n        setColor(color);\r\n    }\r\n\r\n    return (\r\n        <Layout className=\"welcome-wrapper\">\r\n            <Header>\r\n                <Title className=\"title\">Welcome!</Title>\r\n            </Header>\r\n            <Content>\r\n                <Form\r\n                    form={form}\r\n                    name=\"login-form\"\r\n                    layout=\"inline\"\r\n                    size=\"medium\"\r\n                    onFinish={onFinish}>\r\n\r\n                    <Form.Item label=\"Nick Name\" name=\"nickname\" extra=\"max 15 symbols\">\r\n                        <Input placeholder=\"Type your nickname...\" maxLength={15} required />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item label=\"Nick Color\" name=\"color\">\r\n                        <ColorPicker color={color} onClose={colorPickerHandle} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">Entry</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Content>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userLogin: state.userLogin\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({\r\n        login\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Welcome);","import { useEffect } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { Layout, Typography, Row, Col } from 'antd';\r\nimport { ChatArea, ActiveUser } from \"@components\";\r\nimport { logout } from '@slice/loginSlice';\r\nimport { activeUser, allMsg, close } from '@slice/msgSlice';\r\nimport ChatWebSocket from '@utils/chatWebSocket';\r\n\r\nimport \"./chat.scss\";\r\n\r\nconst { Header, Content } = Layout;\r\nconst { Title } = Typography;\r\n\r\nlet ws;\r\nconst Chat = (props) => {\r\n    const history = useHistory();\r\n    const userLogin = useSelector(state => state.userLogin);\r\n    const allMsg = useSelector(state => state.message.msg);\r\n    const allActiveUser = useSelector(state => state.message.activeUser);\r\n    const { isLogin, nickName, nickColor } = userLogin;\r\n\r\n\r\n    /* didMount */\r\n    useEffect(() => {\r\n        if (!isLogin) {\r\n            history.push(\"/react-chat-front\");\r\n\r\n            return;\r\n        }\r\n\r\n        ws = ChatWebSocket({ nickName, nickColor, msgAllCallback, activeUserCallback, logoutUserCallback });\r\n    }, []);\r\n\r\n    const sendMsgHandle = (values) => {\r\n        ws.send(JSON.stringify({ type: 'SEND_MSG', message: values.message }));\r\n    }\r\n\r\n    const msgAllCallback = (messages) => {\r\n        props.allMsg(messages)\r\n    }\r\n\r\n    const activeUserCallback = (activeUser) => {\r\n        props.activeUser(activeUser)\r\n    }\r\n\r\n\r\n    const logoutUserCallback = () => {\r\n        props.logout();\r\n        props.close();\r\n\r\n        if (ws.readyState === 1) {\r\n            ws.send(JSON.stringify({ type: 'LOGOUT' }));\r\n        }\r\n    }\r\n\r\n    /* did Update */\r\n    useEffect(() => {\r\n        if (userLogin && !userLogin.isLogin) history.push(\"/\");\r\n    }, [userLogin]);\r\n\r\n    // did unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            if (userLogin.isLogin) {\r\n                logoutUserCallback();\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Layout className=\"chat-wrapper\">\r\n            <Header>\r\n                <Title className=\"title\">Global Chat!</Title>\r\n            </Header>\r\n            <Content className=\"chat-content-wrapper\">\r\n                <Row><Link to=\"/react-chat-front\">&lt; back to welcome page</Link></Row>\r\n                <Row gutter={24}>\r\n                    <Col span={16}><ChatArea allMsg={allMsg} sendMsgHandle={sendMsgHandle} /></Col>\r\n                    <Col span={8}><ActiveUser allUser={allActiveUser} /></Col>\r\n                </Row>\r\n            </Content>\r\n\r\n        </Layout>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({\r\n        logout,\r\n        activeUser,\r\n        allMsg,\r\n        close\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Chat);\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const initialState = {\r\n    isOpen: false,\r\n    msg: [],\r\n    activeUser: []\r\n};\r\n\r\nexport const messageSlice = createSlice({\r\n    name: 'message',\r\n    initialState,\r\n    reducers: {\r\n        open: state => {\r\n            state.isOpen = true;\r\n        },\r\n        activeUser: (state, { payload }) => {\r\n            state.activeUser = payload.slice();\r\n        },\r\n        allMsg: (state, { payload }) => {\r\n            state.msg = payload.slice();\r\n        },\r\n        close: state => {\r\n            state.isOpen = false;\r\n            state.msg = [];\r\n            state.activeUser = [];\r\n        }\r\n    }\r\n});\r\n\r\nexport const { open, activeUser, allMsg, close } = messageSlice.actions;\r\n\r\nexport default messageSlice.reducer;\r\n","const ChatWebSocket = ({ nickName, nickColor, msgAllCallback, activeUserCallback, logoutUserCallback }) => {\r\n    const ws = new WebSocket(\"wss://chat-nodejs-leonid.herokuapp.com/\");\r\n    //const ws = new WebSocket(\"ws://localhost:9000/\");\r\n    let pingInterval;\r\n\r\n    ws.onopen = () => {\r\n        console.log('websocket is connected...');\r\n        ws.send(JSON.stringify({ type: 'LOGIN', nickName, nickColor }));\r\n\r\n        pingInterval = setInterval(() => ws.send(JSON.stringify({ type: \"PING\" })), 30000);\r\n    };\r\n\r\n    // обработчик входящих сообщений\r\n    ws.onmessage = msg => {\r\n        const data = JSON.parse(msg.data);\r\n        console.log(data);\r\n\r\n        switch (data.type) {\r\n            case \"ACTIVE_USER\": {\r\n                activeUserCallback(data.activeUser);\r\n                break;\r\n            }\r\n            case \"MSG_ALL\": {\r\n                msgAllCallback(data.messages);\r\n                break;\r\n            }\r\n            case \"PONG\": {\r\n                break;\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    ws.onerror = error => {\r\n        console.log(\"socket error\");\r\n\r\n        clearInterval(pingInterval);\r\n        logoutUserCallback();\r\n    };\r\n\r\n    ws.onclose = () => {\r\n        console.log(\"socket is close\");\r\n\r\n        clearInterval(pingInterval);\r\n        logoutUserCallback();\r\n    };\r\n\r\n    return ws;\r\n}\r\n\r\nexport default ChatWebSocket;","import { Switch, Route } from \"react-router-dom\";\r\nimport { Welcome, Chat } from '@pages';\r\nimport { PrivateRoute } from \"@components\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path='/' exact component={Welcome} />\r\n            <Route path='/react-chat-front' exact component={Welcome} />\r\n            <PrivateRoute path=\"/chat\" exact component={Chat} />\r\n            <Route path='*' exact component={Welcome} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Routes;\r\n","import userLogin from './loginSlice';\r\nimport message from './msgSlice';\r\n\r\nexport const reducers = {\r\n    userLogin,\r\n    message\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { reducers } from '@slice';\r\n\r\nconst store = configureStore({\r\n  reducer: reducers\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport Router from \"./Router\";\nimport store from '@store';\n\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Router />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}